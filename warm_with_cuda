#include <iostream>
#include <cstring>
#include <cmath>
#include <ctime>

#include <cuda_runtime.h>
#include <cub/cub.cuh>


__global__
void calculateMatrix(double* arr, double* arr_new, size_t N)
{
    size_t i = blockIdx.x;
    size_t j = threadIdx.x;

    if(!(blockIdx.x == 0 || threadIdx.x == 0)){
                    int n = i * N + j;
                    arr_new[n] = 0.25 * (arr[n - 1] + arr[n + 1] + arr[(i - 1) * N + j] + arr[(i + 1) * N + j]);
                    }
}

__global__
void getErrorMatrix(double* arr, double* arr_new, double* output_arr) {
	size_t idx = blockIdx.x * blockDim.x + threadIdx.x;

	if(!(blockIdx.x == 0 || threadIdx.x == 0)) {
		output_arr[idx] = std::abs(arr_new[idx] - arr[idx]);
	}
}


int main(int argc, char** argv) {

	double accuracy = 0.000001;
	int N, ITER_MAX;
	accuracy = atof(argv[1]);
	N = atoi(argv[2]);
	ITER_MAX = atoi(argv[3]);

	double* arr = (double*)calloc(N * N, sizeof(double));
	double* arr_new = (double*)calloc(N * N, sizeof(double));
	double step = 10.0 / (N-1);
	

	arr[0] = 10;
	arr[N-1] = 20;
	arr[N * (N - 1)] = 20;
	arr[N * N -1] = 30;


	for (int i = 1; i < N; i++) {
		arr[i] = arr[0] + step * i;
		arr[N * (N - 1) + i] = arr[N - 1] + step * i;
		arr[(N * i)] = arr[0] + step * i;
		arr[N - 1 + i * N] = arr[N - 1] + step * i;
	}

	memcpy(arr_new, arr, N * N * sizeof(double));

    cudaSetDevice(3);

    double* device_arr_Ptr, *device_arr_new_Ptr, *device_Error, *error_arr, *temp_Storage = NULL;
	size_t temp_Storage_Size = 0;
    int size = N * N;

	cudaError_t cudaStatus_1 = cudaMalloc((void**)(&device_arr_Ptr), sizeof(double) * size);
	cudaError_t cudaStatus_2 = cudaMalloc((void**)(&device_arr_new_Ptr), sizeof(double) * size);
	cudaMalloc((void**)&device_Error, sizeof(double));
	cudaStatus_1 = cudaMalloc((void**)&error_arr, sizeof(double) * size);
	
	if (cudaStatus_1 != 0 || cudaStatus_2 != 0)
	{
		std::cout << "Memory allocation error" << std::endl;
		return -1;
	}

	cudaStatus_1 = cudaMemcpy(device_arr_Ptr, arr, sizeof(double) * size, cudaMemcpyHostToDevice);
	cudaStatus_2 = cudaMemcpy(device_arr_new_Ptr, arr_new, sizeof(double) * size, cudaMemcpyHostToDevice);

	if (cudaStatus_1 != 0 || cudaStatus_2 != 0)
	{
		std::cout << "Memory transfering error" << std::endl;
		return -1;
	}

    cub::DeviceReduce::Max(temp_Storage, temp_Storage_Size, error_arr, device_Error, size);
	cudaMalloc((void**)&temp_Storage, temp_Storage_Size);

	int iter = 0;
	double error = 1.0;

	clock_t start = clock();

std::cout << N << " " << accuracy <<  " " << std::endl;
	for (; ((iter < ITER_MAX) && (error > accuracy)); iter++) {

        calculateMatrix<<<N - 1, N - 1>>>(device_arr_Ptr, device_arr_new_Ptr, N);

		if (iter % 100 == 0) {
			getErrorMatrix<<<N - 1, N - 1>>>(device_arr_Ptr, device_arr_new_Ptr, error_arr);
			cub::DeviceReduce::Max(temp_Storage, temp_Storage_Size, error_arr, device_Error, size);
			cudaMemcpy(&error, device_Error, sizeof(double), cudaMemcpyDeviceToHost);
		}

        std::swap(device_arr_Ptr, device_arr_new_Ptr);
	}

	clock_t end = clock();

	std::cout << "Time: " << 1.0 * (end - start) / CLOCKS_PER_SEC << std::endl;
	std::cout << "Iter: " << iter << " Error: " << error << std::endl;

/*cudaMemcpy(arr, device_arr_Ptr, sizeof(double) * size, cudaMemcpyDeviceToHost);
    for (int i = 0; i < N; i++){
        for (int j = 0; j < N; j++){
            std::cout << arr[i * N + j] << " ";
        }
        std::cout << std::endl;
    }*/

	cudaFree(device_arr_Ptr);
	cudaFree(device_arr_new_Ptr);
	cudaFree(error_arr);
	cudaFree(temp_Storage);

	delete[] arr;
	delete[] arr_new;

	return 0;
}
